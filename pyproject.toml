[build-system]
requires = ["setuptools>=68.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "fsociety"
version = "4.0.0"
description = "A High-Performance AI-Powered Modular Penetration Testing Framework"
readme = "README.md"
requires-python = ">=3.12"
license = {text = "MIT"}
authors = [
    {name = "fsociety-team", email = "contact@fsociety.dev"}
]
keywords = ["security", "pentesting", "cybersecurity", "ai", "gpu-accelerated"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Information Technology",
    "Topic :: Security",
    "Topic :: Internet",
    "Environment :: Console",
    "Environment :: GPU :: NVIDIA CUDA",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Python :: Implementation :: CPython",
]

dependencies = [
    "rich>=13.7.0",
    "GitPython>=3.1.40",
    "requests>=2.31.0",
    "distro>=1.9.0",
    "urllib3>=2.2.0",
    "aiohttp>=3.9.0",
    "aiofiles>=23.2.0",
    "uvloop>=0.19.0; platform_system != 'Windows'",
    "msgspec>=0.18.0",  # Fast JSON/msgpack serialization
    "orjson>=3.9.0",  # Fast JSON parsing
    "httpx>=0.26.0",  # Modern async HTTP client
    "asyncssh>=2.14.0",  # Async SSH
    "psutil>=5.9.0",  # System monitoring
    "cachetools>=5.3.0",  # Caching utilities
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-benchmark>=4.0.0",
    "black>=23.12.0",
    "ruff>=0.1.9",
    "mypy>=1.8.0",
    "pre-commit>=3.6.0",
]

ai = [
    "torch>=2.1.0",  # PyTorch for AI models
    "transformers>=4.36.0",  # Hugging Face transformers
    "sentence-transformers>=2.2.0",  # Embeddings
    "openai>=1.6.0",  # OpenAI API
    "anthropic>=0.8.0",  # Claude API
    "langchain>=0.1.0",  # LLM framework
    "chromadb>=0.4.0",  # Vector database
    "faiss-gpu>=1.7.2; platform_system == 'Linux'",  # GPU-accelerated similarity search
    "faiss-cpu>=1.7.2; platform_system != 'Linux'",
    "scikit-learn>=1.3.0",  # ML utilities
    "numpy>=1.26.0",
    "pandas>=2.1.0",
]

gpu = [
    "cupy-cuda12x>=12.3.0; platform_system == 'Linux'",  # GPU arrays
    "numba>=0.58.0",  # JIT compilation with CUDA support
    "rapids-singlecell>=0.9.0; platform_system == 'Linux'",  # RAPIDS for GPU
]

all = [
    "fsociety[dev,ai,gpu]",
]

[project.urls]
Homepage = "https://fsociety.dev/"
Documentation = "https://fsociety.dev/docs"
Repository = "https://github.com/fsociety-team/fsociety"
"Bug Tracker" = "https://github.com/fsociety-team/fsociety/issues"
Changelog = "https://github.com/fsociety-team/fsociety/blob/main/CHANGELOG.md"

[project.scripts]
fsociety = "fsociety.__main__:main"
fsoc = "fsociety.__main__:main"  # Short alias

[tool.setuptools.packages.find]
where = ["."]
include = ["fsociety*"]
exclude = ["tests*", "docs*"]

[tool.black]
line-length = 100
target-version = ["py312"]
include = '\.pyi?$'

[tool.ruff]
line-length = 100
target-version = "py312"
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "C",  # flake8-comprehensions
    "B",  # flake8-bugbear
    "UP", # pyupgrade
    "S",  # bandit security
    "T20", # print statements
    "SIM", # simplify
    "PERF", # performance
]
ignore = ["E501", "S603", "S607", "T201"]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401", "F403"]
"tests/*" = ["S101"]

[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
strict_equality = true

[[tool.mypy.overrides]]
module = ["git.*", "distro.*"]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --cov=fsociety --cov-report=html --cov-report=term"
testpaths = ["tests"]
pythonpath = ["."]
asyncio_mode = "auto"

[tool.coverage.run]
source = ["fsociety"]
omit = ["tests/*", "**/__init__.py"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]

[tool.isort]
profile = "black"
line_length = 100